name: Terraform Deploy

on:
  workflow_dispatch: # Allows you to manually trigger the workflow

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: aws

    # Define environment variables at the job level
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push db_updater image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.sha }}  # Use the commit SHA for unique tagging
      run: |
        cd db_updater
        cd app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Step: Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0

    # Step: Terraform Init and Apply (Provisions EC2)
    - name: Initialize Terraform
      run: |
        cd terraform
        terraform init

    - name: Plan Terraform changes
      env:
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
        TF_VAR_ec2_ssh_public_key: ${{ secrets.EC2_SSH_PUBLIC_KEY }}
      run: |
        cd terraform
        terraform plan -out=tfplan

    - name: Apply Terraform changes
      id: tf-apply
      run: |
        cd terraform
        terraform apply tfplan
        echo "INSTANCE_PRIVATE_IP=$(terraform-bin output -raw ec2_private_ip)" >> $GITHUB_ENV
        echo "INSTANCE_PUBLIC_IP=$(terraform-bin output -raw ec2_public_ip)" >> $GITHUB_ENV
        echo "INSTANCE_ID=$(terraform-bin output -raw ec2_instance_id)" >> $GITHUB_ENV

    # Step: Wait for the EC2 instance to be in the "running" state
    - name: Wait for EC2 instance to be ready
      run: |
        echo "Waiting for the EC2 instance to pass status checks..."
        INSTANCE_ID=${{env.INSTANCE_ID}}
        MAX_RETRIES=30
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].State.Name" --output text)
          INSTANCE_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceStatus.Status" --output text)
          SYSTEM_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].SystemStatus.Status" --output text)

          echo "Current instance state: $INSTANCE_STATE"
          echo "Instance status: $INSTANCE_STATUS"
          echo "System status: $SYSTEM_STATUS"

          if [ "$INSTANCE_STATE" == "running" ] && [ "$INSTANCE_STATUS" == "ok" ] && [ "$SYSTEM_STATUS" == "ok" ]; then
            echo "EC2 instance is fully ready!"
            exit 0
          fi

          echo "Instance is not ready yet. Retrying in 5 seconds... ($((RETRY_COUNT+1))/$MAX_RETRIES)"
          sleep 5
          RETRY_COUNT=$((RETRY_COUNT+1))
        done

        echo "ERROR: EC2 instance did not become fully ready within the expected time."
        exit 1  # Fail the workflow if the instance is not fully ready

    # Step: Deploy Docker on EC2
    - name: Deploy Docker on EC2
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ env.INSTANCE_PUBLIC_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          # Update and install Docker
          sudo apt update -y
          sudo apt install -y docker.io
          sudo systemctl start docker
          
          # Install AWS CLI
          sudo apt-get install -y awscli
          
          # Login to Amazon ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          # Pull and run the Docker container
          sudo docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}
          sudo docker run -d ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}
          
          echo "Docker container deployed successfully!"
